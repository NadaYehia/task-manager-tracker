{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3da80818",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tkinter as tk\n",
    "import time\n",
    "from datetime import datetime\n",
    "from  tkinter import ttk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1fa85dce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# add task\n",
    "\n",
    "class Add_task:\n",
    "    \n",
    "    def __init__(self,data,username,password):\n",
    "        \n",
    "        self.data=data\n",
    "        self.username=username\n",
    "        self.password=password\n",
    "        self.window1=tk.Tk()\n",
    "        self.window1.geometry(\"400x400\")\n",
    "\n",
    "        self.task_name_var=tk.StringVar()\n",
    "        self.task_descrip_var=tk.StringVar()\n",
    "\n",
    "        self.task_name_label = tk.Label(self.window1, text = 'Task name', font=('calibre',10, 'bold'))\n",
    "\n",
    "        self.task_name_entry = tk.Entry(self.window1,textvariable = self.task_name_var, font=('calibre',10,'normal'))\n",
    "\n",
    "        self.task_descrip_label = tk.Label(self.window1, text = 'Task description', font = ('calibre',10,'bold'))\n",
    "\n",
    "        self.task_descrip_entry=tk.Entry(self.window1, textvariable =self.task_descrip_var, font = ('calibre',10,'normal'))\n",
    "\n",
    "        self.add_btn=tk.Button(self.window1,text = 'Add', command = self.add_record)\n",
    "\n",
    "\n",
    "        self.task_name_label.grid(row=0,column=0)\n",
    "        self.task_name_entry.grid(row=0,column=1)\n",
    "        self.task_descrip_label.grid(row=1,column=0)\n",
    "        self.task_descrip_entry.grid(row=1,column=1)\n",
    "        self.add_btn.grid(row=2,column=1)\n",
    "\n",
    "    def add_record(self):\n",
    "\n",
    "        task_name=self.task_name_var.get()\n",
    "        task_descrip=self.task_descrip_var.get()\n",
    "\n",
    "        now = datetime.now()\n",
    "        formatted_date_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "        task_creation_date=formatted_date_time\n",
    "        task_status='ongoing'\n",
    "\n",
    "        df=self.data[(self.data.User_name==self.username)&(self.data.Password==self.password)]\n",
    "\n",
    "\n",
    "        if (df.Date_created.isna().all()):\n",
    "            # the user has no assigned tasks then add data to an existing row\n",
    "\n",
    "            self.data.loc[(self.data.User_name==self.username)&(self.data.Password==self.password),'Task_name']=task_name\n",
    "            self.data.loc[(self.data.User_name==self.username)&(self.data.Password==self.password),'Task_description']=task_descrip\n",
    "            self.data.loc[(self.data.User_name==self.username)&(self.data.Password==self.password),'Date_created']=task_creation_date\n",
    "            self.data.loc[(self.data.User_name==self.username)&(self.data.Password==self.password),'Status']=task_status\n",
    "            \n",
    "\n",
    "\n",
    "        else: # add new row\n",
    "            self.data=self.data.append({'User_name':self.username,'Password':self.password,\n",
    "                             'Task_name':task_name, 'Task_description':task_descrip,\n",
    "                              'Date_created':task_creation_date, 'Status':task_status},ignore_index=True)\n",
    "            \n",
    "\n",
    "        \n",
    "        # if the user missed any of the task enteries, but they created a task\n",
    "        # fill the '' with missing not nans\n",
    "        self.data.replace('', 'missing', inplace=True)\n",
    "        self.data.to_csv('users_credentials.csv',index=False)\n",
    "        self.window1.destroy()\n",
    "        \n",
    "    \n",
    "               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c64d16c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# view tasks for this user\n",
    "class View_task:\n",
    "    def __init__(self,data,username,password):\n",
    "        \n",
    "        self.data=data\n",
    "        self.username=username\n",
    "        self.password=password\n",
    "        \n",
    "        self.df=self.data[(self.data.User_name==username)&(self.data.Password==password)]\n",
    "                \n",
    "        self.window1=tk.Tk()\n",
    "        self.window1.geometry(\"400x400\")\n",
    "        self.my_table=tk.ttk.Treeview()\n",
    "        self.my_table['columns'] = ('Task_name', 'Task_description', 'Date_created', 'Status')\n",
    "\n",
    "        self.my_table.column(\"#0\", width=10,  stretch=False)\n",
    "        self.my_table.column(\"Task_name\",anchor=tk.CENTER, width=80)\n",
    "        self.my_table.column(\"Task_description\",anchor=tk.CENTER,width=120)\n",
    "        self.my_table.column(\"Date_created\",anchor=tk.CENTER,width=80)\n",
    "        self.my_table.column(\"Status\",anchor=tk.CENTER,width=80)\n",
    "\n",
    "        self.my_table.heading(\"#0\",text=\"\",anchor=tk.CENTER)\n",
    "        self.my_table.heading(\"Task_name\",text=\"Task_name\",anchor=tk.CENTER)\n",
    "        self.my_table.heading(\"Task_description\",text=\"Task_description\",anchor=tk.CENTER)\n",
    "        self.my_table.heading(\"Date_created\",text=\"Date_created\",anchor=tk.CENTER)\n",
    "        self.my_table.heading(\"Status\",text=\"Status\",anchor=tk.CENTER)\n",
    "        \n",
    "        # Create a context menu\n",
    "        self.context_menu = tk.Menu(self.window1, tearoff=0)\n",
    "        self.context_menu.add_command(label=\"delete task\", command=self.menu_action_delete)\n",
    "        self.context_menu.add_command(label=\"mark task completed\", command=self.menu_action_mark)\n",
    "        \n",
    "        # Bind the right-click event to the Treeview\n",
    "        self.my_table.bind(\"<Button-1>\", self.on_right_click)\n",
    "\n",
    "        \n",
    "        for i in range (len(self.df)):\n",
    "            \n",
    "            \n",
    "            self.my_table.insert(parent='',index='end',iid=i,text='',\n",
    "            values=(self.df.iloc[i]['Task_name'],self.df.iloc[i]['Task_description'],self.df.iloc[i]['Date_created'],self.df.iloc[i]['Status']) )\n",
    "            \n",
    "\n",
    "        self.my_table.pack()\n",
    "        \n",
    "    def on_right_click(self,event):\n",
    "        \n",
    "        # Select the item under the mouse\n",
    "        item = self.my_table.identify_row(event.y)\n",
    "        if item:\n",
    "            self.my_table.selection_set(item)\n",
    "            # Display the context menu\n",
    "            self.context_menu.post(event.x_root, event.y_root)\n",
    "\n",
    "    def menu_action_delete(self):\n",
    "        \n",
    "        selected_item = self.my_table.selection()[0]\n",
    "        d_index=self.df.index[int(selected_item)]\n",
    "        self.data.drop(d_index,inplace=True)\n",
    "        \n",
    "        #delete it from the cvs file too\n",
    "        self.data.to_csv('users_credentials.csv',index=False)\n",
    "        \n",
    "        self.my_table.delete(selected_item)\n",
    "        \n",
    "    def menu_action_mark(self):\n",
    "        \n",
    "        selected_item = self.my_table.selection()[0]\n",
    "        d_index=self.df.index[int(selected_item)]\n",
    "        \n",
    "        self.data.loc[d_index,'Status']='completed'\n",
    "        \n",
    "        #delete it from the cvs file too\n",
    "        self.data.to_csv('users_credentials.csv',index=False)\n",
    "        \n",
    "        self.my_table.set(selected_item,'Status','completed')\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "        \n",
    "   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5185965",
   "metadata": {},
   "outputs": [],
   "source": [
    " class Login:\n",
    "        \n",
    "        def __init__(self,root):\n",
    "            self.attempts=0\n",
    "            self.root=root\n",
    "            self.root.geometry(\"400x400\") \n",
    "            # declaring string variable\n",
    "            # for storing name and password\n",
    "            self.name_var=tk.StringVar()\n",
    "            self.pass_var=tk.StringVar()\n",
    "            # creating a label for \n",
    "            # name using widget Label\n",
    "            self.name_label = tk.Label(root, text = 'Username', font=('calibre',10, 'bold'))\n",
    "\n",
    "            # creating a entry for input\n",
    "            # name using widget Entry\n",
    "            self.name_entry = tk.Entry(root,textvariable = self.name_var, font=('calibre',10,'normal'))\n",
    "\n",
    "            # creating a label for password\n",
    "            self.passw_label = tk.Label(root, text = 'Password', font = ('calibre',10,'bold'))\n",
    "\n",
    "            # creating a entry for password\n",
    "            self.passw_entry=tk.Entry(root, textvariable = self.pass_var, font = ('calibre',10,'normal'), show = '*')\n",
    "\n",
    "            # creating a button using the widget \n",
    "            # Button that will call the submit function \n",
    "            self.sub_btn=tk.Button(root,text = 'Submit', command = self.user_authentication)\n",
    "\n",
    "            # placing the label and entry in\n",
    "            # the required position using grid\n",
    "            # method\n",
    "            self.name_label.grid(row=0,column=0)\n",
    "            self.name_entry.grid(row=0,column=1)\n",
    "            self.passw_label.grid(row=1,column=0)\n",
    "            self.passw_entry.grid(row=1,column=1)\n",
    "            self.sub_btn.grid(row=2,column=1)\n",
    "\n",
    "\n",
    "            \n",
    "        def user_authentication(self):\n",
    "            username=self.name_var.get()\n",
    "            password=self.pass_var.get()\n",
    "\n",
    "            data=pd.read_csv('users_credentials.csv')\n",
    "            df_user= data[(data.User_name==username) & (data.Password==password)]\n",
    "            \n",
    "            if (df_user.empty):\n",
    "                self.attempts += 1\n",
    "                print(self.attempts)\n",
    "                \n",
    "                if(self.attempts>3): \n",
    "                    \n",
    "                    self.sub_btn.destroy()\n",
    "                    self.register_label=tk.Label(root,text= 'Please register', font=('calibre',20,'bold'))\n",
    "                    self.reg_btn=tk.Button(root,text='register',command=self.register_func)\n",
    "                    \n",
    "                    self.name_label.grid(row=1,column=0)\n",
    "                    self.name_entry.grid(row=1,column=1)\n",
    "                    self.passw_label.grid(row=2,column=0)\n",
    "                    self.passw_entry.grid(row=2,column=1)\n",
    "                    self.reg_btn.grid(rows=3,column=1)\n",
    "                    \n",
    "\n",
    "            else:\n",
    "                print('access granted')\n",
    "                action_obj=Action(data,username,password)\n",
    "                action_obj.select_action()\n",
    "                \n",
    "                \n",
    "        def register_func(self):\n",
    "            username=self.name_var.get()\n",
    "            password=self.pass_var.get()\n",
    "            data=pd.read_csv('users_credentials.csv')\n",
    "            #write the new user to the csv file\n",
    "            data=data.append({'User_name':username,'Password':password},ignore_index=True)\n",
    "            data.replace('',np.nan,inplace=True)\n",
    "            data.to_csv('users_credentials.csv',index=False)\n",
    "            action_obj=Action(data,username,password)\n",
    "            action_obj.select_action()\n",
    "   \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c548edf",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Action:\n",
    "    \n",
    "    def __init__(self, data, username,password):\n",
    "        \n",
    "        self.data = data\n",
    "        self.username = username\n",
    "        self.password=password\n",
    "        self.root2=tk.Tk()\n",
    "        \n",
    "    def select_action(self):\n",
    "        root.destroy()\n",
    "        \n",
    "        self.root2.geometry(\"400x400\") \n",
    "        listbox = tk.Listbox(self.root2, height = 10, \n",
    "                  width = 50)\n",
    "        # insert elements by their\n",
    "        # index and names.\n",
    "        listbox.pack()\n",
    "        listbox.insert(1, \"add task\")\n",
    "        listbox.insert(2, \"view my tasks (delete/mark complete)\")\n",
    "        \n",
    "        listbox.bind('<Double-1>',self.selected_item)\n",
    "        \n",
    "\n",
    "    def selected_item(self,evt):\n",
    "        \n",
    "        w = evt.widget\n",
    "        action = int(w.curselection()[0])\n",
    "        self.data=pd.read_csv('users_credentials.csv')\n",
    "        \n",
    "        if(action==0):\n",
    "            \n",
    "            add_task_obj=Add_task(self.data,self.username,self.password)\n",
    "            \n",
    "        elif (action==1):\n",
    "            View_task(self.data,self.username,self.password)\n",
    "            \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a7c58b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "access granted\n"
     ]
    }
   ],
   "source": [
    "root=tk.Tk()\n",
    "login_obj=Login(root)\n",
    "\n",
    "# performing an infinite loop \n",
    "# for the window to display\n",
    "root.mainloop()         \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0274e17",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
